// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid()) // Unique identifier for the user, uses UUID
  email          String          @unique //User's email, must be unique
  password       String //Hashed password
  name           String? //Optional name
  createdAt      DateTime        @default(now()) //Timestamp for when the user was created
  updatedAt      DateTime        @updatedAt //Timestamp for the last update
  //Add relation for Documents later (will be done in Day 4)
  documents      Document[] // A user can own multiple documents (one-to-many relation)
  collaborations Collaboration[] // Documents this user is collaborating on
}

model Document {
  id            String          @id @default(uuid())
  title         String
  content       String          @default("") // Document content, default to empty string
  ownerId       String
  owner         User            @relation(fields: [ownerId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  collaborators Collaboration[] // Collaborators on this document

  // Optional: Add a shared property if you plan for public/private documents later
  // isPublic  Boolean  @default(false)
}

// New Collaboration (Junction) Model
model Collaboration {
  id         String @id @default(uuid()) // Unique ID for each collaboration entry
  userId     String // Foreign key to User
  documentId String // Foreign key to Document
  role       Role   @default(EDITOR) // Role of the collaborator

  user      User     @relation(fields: [userId], references: [id])
  document  Document @relation(fields: [documentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, documentId]) // A user can only have one role per document
}

// New Enum for Roles
enum Role {
  OWNER
  EDITOR
  VIEWER
}
